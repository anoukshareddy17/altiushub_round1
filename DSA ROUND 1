/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
ListNode* merge(ListNode* head1, ListNode* head2)
{
    ListNode* result1=NULL;
    if(head1==NULL)
        return head2;
    if(head2==NULL)
        return head1;
    if(head1->val==head2->val)
    {
        result1=head1;
        result1->next=merge(head1->next,head2);
    }
    else
    {
        result1=head2;
        result1->next=merge(head1,head2->next);
    }
    return result;
    }
}
ListNode* mergeSort(vector<ListNode*>&list, int start, int end)
{
    if(start>=end)
        return list[start];
    int mid=start+(end-start)/2;
    ListNode*left=mergeSort(list,start,mid);
    ListNode*right=mergeSort(list,mid+1,end);
    ListNode*result2=merge(left,right);
    return result2;
}
ListNode* mergeKLists(vector<ListNode*>& lists) 
{
    if(lists.size()==0)
        return NULL;
    ListNode*ans=mergeSort(lists,0,lists.size()-1);
      return ans;
}
